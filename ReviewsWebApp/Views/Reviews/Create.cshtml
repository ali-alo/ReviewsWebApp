@inject IViewLocalizer _localizer
@model ReviewFormViewModel


<partial name="_ReviewItemSummary" model="new ReviewItemSummaryViewModel(Model.ContainerLink, Model.ReviewsAverage, Model.ReviewsCount, Model.ReviewItem)"/>

<hr />
<h2>Add your review</h2>
<div class="mt-3">
    @using (Html.BeginForm("Create", "Reviews", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <input asp-for="Review.ReviewItemId" class="visually-hidden" />
        <div class="form-group">
            <label asp-for="Review.Title" class="form-label"></label>
            <input asp-for="Review.Title" class="form-control" id="focusInput" />
            <span asp-validation-for="Review.Title" class="text-danger"></span>
        </div>

        <div class="row mt-3">
            <div class="form-group col-6">
                <label asp-for="Review.MarkdownText" class="form-label"></label>
                <textarea asp-for="Review.MarkdownText" id="markdownInput" class="form-control" rows="20"></textarea>
            </div>

            <div class="col-6 d-flex flex-column">
                <label class="form-label">Markdown Preview</label>
                <div id="markdownPreview" class="border border-1 border-secondary flex-grow-1 text-start p-2"></div>
            </div>
            <span asp-validation-for="Review.MarkdownText" class="text-danger text-start"></span>
        </div>

        <div class="form-group">
            <div class="mt-3">
                <div class="img-input-div w-100 d-flex justify-content-center align-items-center text-center position-relative">
                    <p>You can drag & drop photos here or click to browse</p>
                    <input asp-for="Review.Files" class="form-control file h-100 w-100 position-absolute cursor-pointer" id="img-input" accept="image/jpeg, image/png, image/jpg, image/gif, image/bmp" multiple" />
                </div>
                <span asp-validation-for="Review.Files" class="text-danger"></span>
            </div>
        </div>
        <output class="w-100 d-flex justify-content-start flex-wrap position-relative mt-3"></output>

        <div class="form-group mt-3">
            <label asp-for="Review.TagsInput" class="form-label">Tags</label>
            <small class="d-block">If you want to add tags, they must start with the '#' sign</small>
            <input asp-for="Review.TagsInput" class="form-control" id="tags-input" />
        </div>
        <div id="tag-suggestions" class="suggestions"></div>

        <div class="tag-list mt-3 visually-hidden">
            @foreach (var tag in Model.AllTags)
            {
                <span>@tag.Name</span>
            }
        </div>

        <div class="text-center mt-3">
            <label class="lead">Rate the item from 1 to 10</label>
            <div class="ratings justify-content-center align-items-center">
                @for (int i = 10; i >= 1; i--)
                {
                    <input type="radio" asp-for="Review.Grade" value="@i" id="@i"/><label for="@i" @(Model.Review.Grade == i ? "data-clicked=true" : "")>&#9733</label>
                }
            </div>
            <p class="lead"><span id="choice">?</span>/10</p>
        </div>

        <button type="submit" class="btn btn-primary mt-3">Submit</button>
    }
</div>

<script>
    const output = document.querySelector("output");
    const imgInput = document.getElementById("img-input");
    let imagesArray = []

    imgInput.addEventListener("change", () => {
        const files = imgInput.files
        for (let i = 0; i < files.length; i++) {
            addImage(files[i]);
        }
        displayImages()
    })
    
    function addImage(file) {
        if (!file.type.match("image")) return;
        if (imagesArray.every(image => image.name !== file.name))
            imagesArray.push(file)
    }

    function displayImages() {
        let images = ""
        imagesArray.forEach((image, index) => {
            images += `<div class="image overflow-hidden position-relative">
                    <img src="${URL.createObjectURL(image)}" alt="image" class="w-100 h-100 img-clickable cursor-pointer">
                    <span onclick="deleteImage(${index})" class="text-danger fs-2 cursor-pointer position-absolute">&times;</span>
                  </div>`
        })
        output.innerHTML = images
        updateInputFiles();
        addImageClickEvents();
    }

    function deleteImage(index) {
        imagesArray.splice(index, 1)
        displayImages()
    }

    function updateInputFiles() {
        const updatedFiles = new DataTransfer();
        imagesArray.forEach((file) => {
            updatedFiles.items.add(new File([file], file.name, { type: file.type }));
        });
        imgInput.files = updatedFiles.files;
    }
</script>