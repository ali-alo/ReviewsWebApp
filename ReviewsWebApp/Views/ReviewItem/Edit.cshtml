@using System.Globalization
@inject IViewLocalizer _localizer
@model ReviewItemDto

@{
    var currentCulture = CultureInfo.CurrentCulture;
    var cultureName = currentCulture.Name;
}

<h2 class="text-center">@(cultureName == "en" ? Model.NameEn : Model.NameRu)<partial name="_ReviewGroupIcon" model="Model.ReviewGroup.NameEn" /></h2>

<form asp-antiforgery="true" asp-action="Edit" asp-controller="ReviewItem" method="post" enctype="multipart/form-data" id="putForm">
    
    <input asp-for="Id" class="form-control visually-hidden" id="reviewItemId" />

    <div class="row mt-4">
        <div class="form-group col-6">
            <label asp-for="NameEn" class="form-label"></label>
            <input asp-for="NameEn" class="form-control" id="focusInput" />
            <span asp-validation-for="NameEn" class="text-danger"></span>
        </div>

        <div class="form-group col-6">
            <label asp-for="NameRu" class="form-label"></label>
            <input asp-for="NameRu" class="form-control" />
            <span asp-validation-for="NameRu" class="text-danger"></span>
        </div>
    </div>

    <div class="row mt-4">
        <div class="form-group col-6">
            <label asp-for="DescriptionEn" class="form-label"></label>
            <textarea asp-for="DescriptionEn" class="form-control" rows="12"></textarea>
            <span asp-validation-for="DescriptionEn" class="text-danger"></span>
        </div>

        <div class="form-group col-6">
            <label asp-for="DescriptionRu" class="form-label"></label>
            <textarea asp-for="DescriptionRu" class="form-control" rows="12"></textarea>
            <span asp-validation-for="DescriptionRu" class="text-danger"></span>
        </div>
    </div>

    <div class="mt-4">
        <div class="img-input-div w-100 d-flex justify-content-center align-items-center text-center position-relative">
            <p>@_localizer["AddOneImageHere"]</p>
            <input asp-for="ImageFile" class="form-control file h-100 w-100 position-absolute cursor-pointer" id="img-input" accept="image/jpeg, image/png, image/jpg, image/gif, image/bmp" />
        </div>
        <span asp-validation-for="ImageFile" class="text-danger"></span>
    </div>

    <output class="w-100 d-flex justify-content-start flex-wrap position-relative mt-3"></output>

    <div id="validationErrors" class="text-danger mt-3"></div>

    <div class="d-flex flex-end mt-3">
        <button type="submit" class="btn btn-primary me-3" id="submitButton">@_localizer["Save"]</button>
        <button class="btn btn-danger" id="deleteButton">@_localizer["Delete"]</button>
    </div>
</form>

<script>
    const output = document.querySelector("output");
    const imgInput = document.getElementById("img-input");
    let image = null;

    imgInput.addEventListener("change", () => {
        const file = imgInput.files[0];
        if (file && file.type.match("image")) {
            image = file;
            displayImage();
        }
    });

    function displayImage() {
        if (!image) return;
        output.innerHTML = `<div class="image overflow-hidden position-relative">
                            <img src="${URL.createObjectURL(image)}" alt="image" class="w-100 h-100 img-clickable cursor-pointer">
                            <span onclick="deleteImage()" class="text-danger fs-2 cursor-pointer position-absolute">&times;</span>
                        </div>`;
        addImageClickEvents();
    }

    function deleteImage() {
        image = null;
        output.innerHTML = "";
        imgInput.value = "";
    }

    // ajax to use post and delete methods
    const reviewItemId = document.getElementById("reviewItemId").value;
    document.getElementById("submitButton").addEventListener("click", function (event) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("putForm"));
        var xhr = new XMLHttpRequest();
        xhr.open("PUT", "/ReviewItem/Edit", true);
        xhr.onload = function () {
            if (xhr.status === 200) {
                window.location.href = "/ReviewItem/Details/" + reviewItemId;
            } else {
                const validationErrors = JSON.parse(xhr.responseText);
                const validationErrorsDiv = document.getElementById("validationErrors");
                validationErrorsDiv.innerHTML = "Validation Errors:<br>";
                for (const key in validationErrors) {
                    if (validationErrors.hasOwnProperty(key)) {
                        const errors = validationErrors[key];
                        for (const error of errors) {
                            validationErrorsDiv.innerHTML += `${error}<br>`;
                        }
                    }
                }
            }
        };
        xhr.send(formData);
    });

    function deleteReviewItem(reviewItemId) {
        var xhr = new XMLHttpRequest();
        xhr.open("DELETE", "/ReviewItem/Delete/" + reviewItemId, true);
        xhr.onload = function () {
            if (xhr.status === 200) {
                window.location.href = "/ReviewItem/List";
            } else {
                console.error("Delete review item request failed with status: " + xhr.status);
            }
        };
        xhr.send();
    }

    document.getElementById("deleteButton").addEventListener("click", function (event) {
        event.preventDefault();
        var reviewItemId = document.getElementById("reviewItemId").value;
        deleteReviewItem(reviewItemId);
    });
</script>